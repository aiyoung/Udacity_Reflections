Manual vs. Automatic pull

Why might you want to always pull changes manually rather than having Git automatcially stay up-to-date with your remote repository?

A: It's a good idea to always pull changes manually from a remote repository because a colaborator might have made changes to the project that you might not what in your local master branch. Or you might want to fold those changes into a different branch on your local machine. 


Forks, CLones, and Branches. 

Q: Describe the differences between forks, clones, and branches. When would you use one instead of another. 

A:

A fork is when you "copy" a project from another person on GitHub into your own repository. One would create a fork when they want to utilize another users code, or as a method of QC when working on a large, collaborative project. 

A clone can be done locally or on GitHub in your own repository and copys all of the content of a project into a new area. We haven't gone over clones much in the class yet, so i'm not sure why one would want to use clone over branch. 

Braches are used locally and can be pushed to GitHub. Braches enable a user to work on various aspects of a project while keeping the master "clean" until a feature is ready to roll back into the master branch. 

Local Copies of Remote Branches. 

Q: What is the benefit of having a copy of the last known state of the remote stored locally?

A: Having a copy of the last known state of the remote on your local machine is benfitial for many reasons. 

As stated in the video, if you're about to work remotely without an internet connection, grabbing the last known state before you head out allows you to view and merge the remote with your local project offline. 

Another benifit is that you could download the most recent remote and continue to work on your master vesion until your are ready to roll your changes into the remote version. 

In this case, i'm treating the remote as your "production ready" code, and the local master as a branch of that. 

Collaboration using Git and GitHub. 

Q: How would you collaborate without using Git or GitHub? What would be easier, what would be harder?

A: 

Well you could use a different soruce control software package. 

You could also try managing the code your self by having a server with production code and designating a person to be the controller of that code. 

Then you'd have to make use of tools like exam diff, etc to check for code changes. 

All and all, i perfer git so far for collaboration. But i haven't tried many other software source control solutions. 