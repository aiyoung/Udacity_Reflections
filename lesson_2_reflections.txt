Reflection: Staging Area. 

How is the staging area different from the working directory and the repository? What value do you think the staging area offers?

A: The staging area is where you can group files to be added as a commit to a repository. 

by using staging area's, one can group project that contains many files and whose strucuture may be dictated by a given programming language, complier, into different logical constructs. 

I think that the benifit of a stanging area is that one can make various commit groups that aren't dictated by the file strucuture required by a complier. I bet you can make them across smaller projects as well. 

The double edged sword of this is that you can make some really complated commit structures that could be difficult for someone who is unfamiliar with the overall project to follow. 

Reflection: Commit Size. 

How can you use the staging area to make sure you have one commit per logical change?

Well, you choose what files that have changed to throw into the staging area before you commit. 

Reflection: When to use branches. 

What are some situations where branches would be helpful in keeping your histroy organized? How would branches help?

A: well in the case where one wants to experiment branches could be helpful. 

or if one has a big feature they want to eventually roll into the master branch, but want to keep the master branch clean while they work on that new feature. 

Branches are neat!. 

So, if you've changed several files, you can add those files to different commits. One per logical change. 

Reflection: Visualizing with Diagrams.

How do the diagrams help you visualize the branch structure?

Diagrams help you visualize what nodes various branches sprung from, points they merged, etc. 

I think it'd be worth looking into that git flow stuff people were talking about online that makes visualizing a given git repository easier than the current ASCII like stuff of git log --graph or whatever the command was. 

Reflection: Merging two branches. 

What was the result of merging two branches together? Why do we represent it in the diagram the way we do?

A:

Well, merging the two branches should have gone seemlessly, but i ended up with a conflect in game.js. 

To resolve the conflict, i had to run git mergetool which opened apple's dev tool, filemeerge. 

Filemerge is bad ass and i wish i had it for windows! I'll have to look up a windows equivalent. 

anyway, after refviewing the various changes, i saved the file and commited the change. 

What sucks is that some how all previous commits got totally nuked from the master!! :( 

Had this been an important project, i would have fliped out! Hopefully there is a way to fix this. 

On to the second part of the question. The branches are represented in a diagram because they branch out from the master, and can then recombine. It's fairly self explanitory really. 

Reflection: Automatic vs. Manual Merging

Q: What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Pros: We can now merge experiments back into production code and vice versa allowing us the freedom to experment. 

The merges are trackable to a point. My commits seems to fold in really weird ways when i use git mergetool, so i am not too happy about that. Git whines that i don't have stuff set up correctly, so it might just be that. 

Cons: I haven't gotten the method shown in the class videos to show up when a conflict occurs, but this method seems tedious. 

I like apple's  merge tool quite a bit, but a HUGE downside to that tool is that i am not able to add code as i perform the merge. So i have to write down changes to make after i do the file merge since i can't mix and match code between two files. But i guess i never could do this in examdiff, so it's not a huge deal. 

I'm not sure how much i want to use git vs. source safe at work at the moment. I will have to wait until vic gets source safe hopefully up and running on monday to see how that works. if i want to keep going down that legacy route, etc. 